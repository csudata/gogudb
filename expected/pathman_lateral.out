\set VERBOSITY terse
SET search_path = 'public','_gogu';
CREATE EXTENSION gogudb;
CREATE SCHEMA test_lateral;
/* create table partitioned by HASH */
create table test_lateral.data(id int8 not null);
select create_hash_partitions('test_lateral.data', 'id', 10);
 create_hash_partitions 
------------------------
                     10
(1 row)

insert into test_lateral.data select generate_series(1, 10000);
VACUUM ANALYZE;
set enable_hashjoin = off;
set enable_mergejoin = off;
/* all credits go to Ivan Frolkov */
explain (costs off)
select * from
	test_lateral.data as t1,
	lateral(select * from test_lateral.data as t2 where t2.id > t1.id) t2,
	lateral(select * from test_lateral.data as t3 where t3.id = t2.id + t1.id) t3
			where t1.id between 1 and 100 and
				  t2.id between 2 and 299 and
				  t1.id > t2.id and
				  exists(select * from test_lateral.data t
						 where t1.id = t2.id and t.id = t3.id);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Nested Loop
   ->  Nested Loop
         Join Filter: ((t2.id + t1.id) = t.id)
         ->  HashAggregate
               Group Key: t.id
               ->  Append
                     ->  Seq Scan on _test_lateral_0_data t
                     ->  Seq Scan on _test_lateral_1_data t_1
                     ->  Seq Scan on _test_lateral_2_data t_2
                     ->  Seq Scan on _test_lateral_3_data t_3
                     ->  Seq Scan on _test_lateral_4_data t_4
                     ->  Seq Scan on _test_lateral_5_data t_5
                     ->  Seq Scan on _test_lateral_6_data t_6
                     ->  Seq Scan on _test_lateral_7_data t_7
                     ->  Seq Scan on _test_lateral_8_data t_8
                     ->  Seq Scan on _test_lateral_9_data t_9
         ->  Materialize
               ->  Nested Loop
                     Join Filter: ((t2.id > t1.id) AND (t1.id > t2.id) AND (t1.id = t2.id))
                     ->  Append
                           ->  Seq Scan on _test_lateral_0_data t2
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_1_data t2_1
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_2_data t2_2
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_3_data t2_3
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_4_data t2_4
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_5_data t2_5
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_6_data t2_6
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_7_data t2_7
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_8_data t2_8
                                 Filter: ((id >= 2) AND (id <= 299))
                           ->  Seq Scan on _test_lateral_9_data t2_9
                                 Filter: ((id >= 2) AND (id <= 299))
                     ->  Materialize
                           ->  Append
                                 ->  Seq Scan on _test_lateral_0_data t1
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_1_data t1_1
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_2_data t1_2
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_3_data t1_3
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_4_data t1_4
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_5_data t1_5
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_6_data t1_6
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_7_data t1_7
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_8_data t1_8
                                       Filter: ((id >= 1) AND (id <= 100))
                                 ->  Seq Scan on _test_lateral_9_data t1_9
                                       Filter: ((id >= 1) AND (id <= 100))
   ->  Custom Scan (RuntimeAppend)
         Prune by: (t.id = t3.id)
         ->  Seq Scan on _test_lateral_0_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_1_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_2_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_3_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_4_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_5_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_6_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_7_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_8_data t3
               Filter: (t.id = id)
         ->  Seq Scan on _test_lateral_9_data t3
               Filter: (t.id = id)
(84 rows)

set enable_hashjoin = on;
set enable_mergejoin = on;
DROP SCHEMA test_lateral CASCADE;
NOTICE:  drop cascades to 11 other objects
DROP EXTENSION gogudb;
