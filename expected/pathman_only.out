/*
 * ---------------------------------------------
 *  NOTE: This test behaves differenly on PgPro
 * ---------------------------------------------
 */
\set VERBOSITY terse
SET search_path = 'public','_gogu';
CREATE EXTENSION gogudb;
CREATE SCHEMA test_only;
/* Test special case: ONLY statement with not-ONLY for partitioned table */
CREATE TABLE test_only.from_only_test(val INT NOT NULL);
INSERT INTO test_only.from_only_test SELECT generate_series(1, 20);
SELECT create_range_partitions('test_only.from_only_test', 'val', 1, 2);
 create_range_partitions 
-------------------------
                      10
(1 row)

VACUUM ANALYZE;
/* should be OK */
EXPLAIN (COSTS OFF)
SELECT * FROM ONLY test_only.from_only_test
UNION SELECT * FROM test_only.from_only_test;
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group Key: from_only_test.val
   ->  Append
         ->  Seq Scan on from_only_test
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test
               ->  Seq Scan on _test_only_2_from_only_test
               ->  Seq Scan on _test_only_3_from_only_test
               ->  Seq Scan on _test_only_4_from_only_test
               ->  Seq Scan on _test_only_5_from_only_test
               ->  Seq Scan on _test_only_6_from_only_test
               ->  Seq Scan on _test_only_7_from_only_test
               ->  Seq Scan on _test_only_8_from_only_test
               ->  Seq Scan on _test_only_9_from_only_test
               ->  Seq Scan on _test_only_10_from_only_test
(15 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
SELECT * FROM test_only.from_only_test
UNION SELECT * FROM ONLY test_only.from_only_test;
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group Key: _test_only_1_from_only_test.val
   ->  Append
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test
               ->  Seq Scan on _test_only_2_from_only_test
               ->  Seq Scan on _test_only_3_from_only_test
               ->  Seq Scan on _test_only_4_from_only_test
               ->  Seq Scan on _test_only_5_from_only_test
               ->  Seq Scan on _test_only_6_from_only_test
               ->  Seq Scan on _test_only_7_from_only_test
               ->  Seq Scan on _test_only_8_from_only_test
               ->  Seq Scan on _test_only_9_from_only_test
               ->  Seq Scan on _test_only_10_from_only_test
         ->  Seq Scan on from_only_test
(15 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
SELECT * FROM test_only.from_only_test
UNION SELECT * FROM test_only.from_only_test
UNION SELECT * FROM ONLY test_only.from_only_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 HashAggregate
   Group Key: _test_only_1_from_only_test.val
   ->  Append
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test
               ->  Seq Scan on _test_only_2_from_only_test
               ->  Seq Scan on _test_only_3_from_only_test
               ->  Seq Scan on _test_only_4_from_only_test
               ->  Seq Scan on _test_only_5_from_only_test
               ->  Seq Scan on _test_only_6_from_only_test
               ->  Seq Scan on _test_only_7_from_only_test
               ->  Seq Scan on _test_only_8_from_only_test
               ->  Seq Scan on _test_only_9_from_only_test
               ->  Seq Scan on _test_only_10_from_only_test
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test _test_only_1_from_only_test_1
               ->  Seq Scan on _test_only_2_from_only_test _test_only_2_from_only_test_1
               ->  Seq Scan on _test_only_3_from_only_test _test_only_3_from_only_test_1
               ->  Seq Scan on _test_only_4_from_only_test _test_only_4_from_only_test_1
               ->  Seq Scan on _test_only_5_from_only_test _test_only_5_from_only_test_1
               ->  Seq Scan on _test_only_6_from_only_test _test_only_6_from_only_test_1
               ->  Seq Scan on _test_only_7_from_only_test _test_only_7_from_only_test_1
               ->  Seq Scan on _test_only_8_from_only_test _test_only_8_from_only_test_1
               ->  Seq Scan on _test_only_9_from_only_test _test_only_9_from_only_test_1
               ->  Seq Scan on _test_only_10_from_only_test _test_only_10_from_only_test_1
         ->  Seq Scan on from_only_test
(26 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
SELECT * FROM ONLY test_only.from_only_test
UNION SELECT * FROM test_only.from_only_test
UNION SELECT * FROM test_only.from_only_test;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 HashAggregate
   Group Key: from_only_test.val
   ->  Append
         ->  Seq Scan on from_only_test
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test
               ->  Seq Scan on _test_only_2_from_only_test
               ->  Seq Scan on _test_only_3_from_only_test
               ->  Seq Scan on _test_only_4_from_only_test
               ->  Seq Scan on _test_only_5_from_only_test
               ->  Seq Scan on _test_only_6_from_only_test
               ->  Seq Scan on _test_only_7_from_only_test
               ->  Seq Scan on _test_only_8_from_only_test
               ->  Seq Scan on _test_only_9_from_only_test
               ->  Seq Scan on _test_only_10_from_only_test
         ->  Append
               ->  Seq Scan on _test_only_1_from_only_test _test_only_1_from_only_test_1
               ->  Seq Scan on _test_only_2_from_only_test _test_only_2_from_only_test_1
               ->  Seq Scan on _test_only_3_from_only_test _test_only_3_from_only_test_1
               ->  Seq Scan on _test_only_4_from_only_test _test_only_4_from_only_test_1
               ->  Seq Scan on _test_only_5_from_only_test _test_only_5_from_only_test_1
               ->  Seq Scan on _test_only_6_from_only_test _test_only_6_from_only_test_1
               ->  Seq Scan on _test_only_7_from_only_test _test_only_7_from_only_test_1
               ->  Seq Scan on _test_only_8_from_only_test _test_only_8_from_only_test_1
               ->  Seq Scan on _test_only_9_from_only_test _test_only_9_from_only_test_1
               ->  Seq Scan on _test_only_10_from_only_test _test_only_10_from_only_test_1
(26 rows)

/* not ok, ONLY|non-ONLY in one query (this is not the case for PgPro) */
EXPLAIN (COSTS OFF)
SELECT * FROM test_only.from_only_test a
JOIN ONLY test_only.from_only_test b USING(val);
                       QUERY PLAN                       
--------------------------------------------------------
 Nested Loop
   ->  Seq Scan on from_only_test b
   ->  Custom Scan (RuntimeAppend)
         Prune by: (b.val = a.val)
         ->  Seq Scan on _test_only_1_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_2_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_3_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_4_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_5_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_6_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_7_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_8_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_9_from_only_test a
               Filter: (b.val = val)
         ->  Seq Scan on _test_only_10_from_only_test a
               Filter: (b.val = val)
(24 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
WITH q1 AS (SELECT * FROM test_only.from_only_test),
	 q2 AS (SELECT * FROM ONLY test_only.from_only_test)
SELECT * FROM q1 JOIN q2 USING(val);
                       QUERY PLAN                       
--------------------------------------------------------
 Hash Join
   Hash Cond: (q1.val = q2.val)
   CTE q1
     ->  Append
           ->  Seq Scan on _test_only_1_from_only_test
           ->  Seq Scan on _test_only_2_from_only_test
           ->  Seq Scan on _test_only_3_from_only_test
           ->  Seq Scan on _test_only_4_from_only_test
           ->  Seq Scan on _test_only_5_from_only_test
           ->  Seq Scan on _test_only_6_from_only_test
           ->  Seq Scan on _test_only_7_from_only_test
           ->  Seq Scan on _test_only_8_from_only_test
           ->  Seq Scan on _test_only_9_from_only_test
           ->  Seq Scan on _test_only_10_from_only_test
   CTE q2
     ->  Seq Scan on from_only_test
   ->  CTE Scan on q1
   ->  Hash
         ->  CTE Scan on q2
(19 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
WITH q1 AS (SELECT * FROM ONLY test_only.from_only_test)
SELECT * FROM test_only.from_only_test JOIN q1 USING(val);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Nested Loop
   CTE q1
     ->  Seq Scan on from_only_test from_only_test_1
   ->  CTE Scan on q1
   ->  Custom Scan (RuntimeAppend)
         Prune by: (q1.val = from_only_test.val)
         ->  Seq Scan on _test_only_1_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_2_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_3_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_4_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_5_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_6_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_7_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_8_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_9_from_only_test from_only_test
               Filter: (q1.val = val)
         ->  Seq Scan on _test_only_10_from_only_test from_only_test
               Filter: (q1.val = val)
(26 rows)

/* should be OK */
EXPLAIN (COSTS OFF)
SELECT * FROM test_only.from_only_test
WHERE val = (SELECT val FROM ONLY test_only.from_only_test
			 ORDER BY val ASC
			 LIMIT 1);
                           QUERY PLAN                            
-----------------------------------------------------------------
 Custom Scan (RuntimeAppend)
   Prune by: (from_only_test.val = $0)
   InitPlan 1 (returns $0)
     ->  Limit
           ->  Sort
                 Sort Key: from_only_test_1.val
                 ->  Seq Scan on from_only_test from_only_test_1
   ->  Seq Scan on _test_only_1_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_2_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_3_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_4_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_5_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_6_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_7_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_8_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_9_from_only_test from_only_test
         Filter: (val = $0)
   ->  Seq Scan on _test_only_10_from_only_test from_only_test
         Filter: (val = $0)
(27 rows)

DROP SCHEMA test_only CASCADE;
NOTICE:  drop cascades to 12 other objects
DROP EXTENSION gogudb;
